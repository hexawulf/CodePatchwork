// client/src/lib/firebase.ts
/* ------------------------------------------------------------------
 * Firebase bootstrap for CodePatchwork
 * ------------------------------------------------------------------ */

import { initializeApp, getApps, getApp } from "firebase/app";
import {
  getAuth,
  GoogleAuthProvider,
  onAuthStateChanged,
  User,
} from "firebase/auth";

// 1Ô∏è‚É£ Pull the seven required VITE_ env-vars out of import.meta.env
const {
  VITE_FIREBASE_API_KEY,
  VITE_FIREBASE_AUTH_DOMAIN,
  VITE_FIREBASE_PROJECT_ID,
  VITE_FIREBASE_STORAGE_BUCKET,
  VITE_FIREBASE_MESSAGING_SENDER_ID,
  VITE_FIREBASE_APP_ID,
  VITE_FIREBASE_MEASUREMENT_ID,
} = import.meta.env;

// 2Ô∏è‚É£ Sanity-check: error if any of the ‚Äúmust have‚Äù values is missing
if (
  !VITE_FIREBASE_API_KEY ||
  !VITE_FIREBASE_AUTH_DOMAIN ||
  !VITE_FIREBASE_PROJECT_ID
) {
  throw new Error(
    "[Firebase] Missing required VITE_FIREBASE_* env vars. " +
      "Make sure your .env is loading them."
  );
}

// 3Ô∏è‚É£ Build your config object
const firebaseConfig = {
  apiKey: VITE_FIREBASE_API_KEY,
  authDomain: VITE_FIREBASE_AUTH_DOMAIN,
  projectId: VITE_FIREBASE_PROJECT_ID,
  storageBucket: VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: VITE_FIREBASE_APP_ID,
  measurementId: VITE_FIREBASE_MEASUREMENT_ID,
};

// 4Ô∏è‚É£ Debug log so you can see exactly what shipped in your bundle
console.log("%c[Firebase cfg]", "color:#4ade80;", firebaseConfig);

// 5Ô∏è‚É£ Initialise the app (avoiding duplicates on hot-reload)
const app = getApps().length ? getApp() : initializeApp(firebaseConfig);

// 6Ô∏è‚É£ Set up Auth + Google provider
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();

// 7Ô∏è‚É£ Listen for sign-in state changes and POST your ID token to the server
if (typeof window !== "undefined") {
  onAuthStateChanged(auth, async (user: User | null) => {
    if (!user) {
      console.log("[Firebase] No user signed in");
      return;
    }

    try {
      // a) grab a fresh ID token
      const idToken = await user.getIdToken(/* forceRefresh */ true);

      // b) send it to your backend
      const res = await fetch("/api/auth/user", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idToken }),
      });

      if (!res.ok) {
        console.error(
          "üî¥ /api/auth/user failed:",
          res.status,
          await res.text()
        );
      } else {
        console.log("üü¢ /api/auth/user succeeded:", await res.json());
      }
    } catch (e) {
      console.error("[Firebase] Error sending ID token:", e);
    }
  });
}

// 8Ô∏è‚É£ In non-prod, expose for DevTools debugging
if (
  import.meta.env.MODE !== "production" &&
  typeof window !== "undefined"
) {
  // @ts-ignore
  window.__app = app;
  // @ts-ignore
  window.__auth = auth;
  // @ts-ignore
  window.__prov = googleProvider;
}

// 9Ô∏è‚É£ Export for your UI code
export { app, auth, googleProvider };
export type { User as FirebaseUser };
